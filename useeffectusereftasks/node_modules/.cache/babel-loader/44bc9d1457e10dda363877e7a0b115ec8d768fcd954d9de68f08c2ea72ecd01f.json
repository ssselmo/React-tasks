{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Selma\\\\Desktop\\\\ReactApp\\\\useeffectusereftasks\\\\src\\\\App.tsx\";\nimport React from \"react\";\nimport { Task1 } from \"./components/Task1\";\nimport { Task2 } from \"./components/Task2\";\nimport { Task3 } from \"./components/Task3\";\nimport { Task4 } from \"./components/Task4\";\nimport { Task5 } from \"./components/Task5\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Task1, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Task2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Task3, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Task4, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Task5, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n// const [prvi, postaviPrvi] = useState(0);\n// const [drugi, postaviDrugi] = useState(0);\n// const [count, setCount] = useState(0);\n// const [count, setCount] = useState(0);\n// const [button, setButton] = useState(false);\n\n//   const countRef = useRef(0);\n//   const handleClick = () =>\n// {\n//   countRef.current+=1;\n//   alert(`Kliknuli ste ${countRef.current} puta`);\n// }\n//   const inputRef = useRef<HTMLInputElement>(null);\n//   const [value,setValue] = useState(\"\");\n// const handleClick = () => {\n//   if (inputRef.current)\n//     setValue(inputRef.current.value);\n\n// }\n\n//useEffect(() => {\n// console.log(`Broj klikova : ${count}`);\n// if(count>5)\n// {\n//   setButton(true);\n// }\n// inputRef.current?.focus();},[]);\n\n// useEffect(() => {\n//   console.log(`Trenutni broj: ${count}`);\n// }, [count]);,\n// return () => {\n\n//   console.log(\"Čišćenje efekata\"); };\n// },);\n// return(\n//     <div>\n\n//     {/* <label htmlFor=\"input\">Unesite tekst</label>\n//     <input ref={inputRef} id=\"input\" type=\"text\"/>\n//     <button onClick={handleClick}>Prikazi</button>\n//     <p>{inputRef.current?.value}</p> */}\n//     <button onClick={handleClick}>Kliknite me</button>\n//     <p>{countRef.current}</p>\n\n//     </div>\n//   );\n\n/* <h1> Kliknuli smo {count} puta</h1>\r\n    <h2> {count<=2? \"Kliknuli ste manje od 2\" : \"Kliknuli ste vise od 2 puta\"} </h2>\r\n    <button className=\"btn\" onClick={() => setCount(count + 1)} disabled={button}>Povećaj</button>\r\n*/\n// return (\n//   <div>\n//     <h1>{count}</h1>\n//     <button onClick={() => setCount(count + 1)}>Povećaj</button>\n//     <button onClick={() => setCount(0)} >Resetiraj</button>\n//   </div>\n// );\n\n// const [ime, setIme] = useState(\"Ime\");\n// const [prezime, setPrezime] = useState(\"Prezime\");\n\n// const [darkMode, setDarkMode] =useState (false);\n// const toggleTheme = () => { setDarkMode(!darkMode);\n\n// };\n\n// <div className={darkMode? 'dark-theme' : 'light-theme'}>\n\n//   <button onClick={toggleTheme}>{darkMode? 'Prebaci na svijetlu temu' : 'Prebaci na tamnu temu'}</button>\n\n// </div>\n\n// export default App;\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Task1","Task2","Task3","Task4","Task5","jsxDEV","_jsxDEV","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Selma/Desktop/ReactApp/useeffectusereftasks/src/App.tsx"],"sourcesContent":["import { randomInt } from \"crypto\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport {Task1} from \"./components/Task1\";\r\nimport {Task2} from \"./components/Task2\";\r\nimport {Task3} from \"./components/Task3\";\r\nimport {Task4} from \"./components/Task4\";\r\nimport {Task5} from \"./components/Task5\";\r\nexport const App: React.FC = () => {\r\n  return(\r\n    <div>\r\n      <Task1/>\r\n      <Task2/>\r\n      <Task3/>\r\n      <Task4/>\r\n      <Task5/>\r\n    </div>\r\n  );\r\n};\r\n  // const [prvi, postaviPrvi] = useState(0);\r\n  // const [drugi, postaviDrugi] = useState(0);\r\n  // const [count, setCount] = useState(0);\r\n  // const [count, setCount] = useState(0);\r\n  // const [button, setButton] = useState(false);\r\n\r\n//   const countRef = useRef(0);\r\n//   const handleClick = () =>\r\n// {\r\n//   countRef.current+=1;\r\n//   alert(`Kliknuli ste ${countRef.current} puta`);\r\n// }\r\n//   const inputRef = useRef<HTMLInputElement>(null);\r\n//   const [value,setValue] = useState(\"\");\r\n// const handleClick = () => {\r\n//   if (inputRef.current)\r\n//     setValue(inputRef.current.value);\r\n\r\n// }\r\n\r\n//useEffect(() => {\r\n    // console.log(`Broj klikova : ${count}`);\r\n    // if(count>5)\r\n    // {\r\n    //   setButton(true);\r\n    // }\r\n    // inputRef.current?.focus();},[]);\r\n  \r\n\r\n  // useEffect(() => {\r\n  //   console.log(`Trenutni broj: ${count}`);\r\n  // }, [count]);,\r\n  // return () => {\r\n    \r\n  //   console.log(\"Čišćenje efekata\"); };\r\n  // },);\r\n  // return(\r\n  //     <div>\r\n        \r\n  //     {/* <label htmlFor=\"input\">Unesite tekst</label>\r\n  //     <input ref={inputRef} id=\"input\" type=\"text\"/>\r\n  //     <button onClick={handleClick}>Prikazi</button>\r\n  //     <p>{inputRef.current?.value}</p> */}\r\n  //     <button onClick={handleClick}>Kliknite me</button>\r\n  //     <p>{countRef.current}</p>\r\n      \r\n  //     </div>\r\n  //   );\r\n\r\n    /* <h1> Kliknuli smo {count} puta</h1>\r\n        <h2> {count<=2? \"Kliknuli ste manje od 2\" : \"Kliknuli ste vise od 2 puta\"} </h2>\r\n        <button className=\"btn\" onClick={() => setCount(count + 1)} disabled={button}>Povećaj</button>\r\n   */\r\n  // return (\r\n  //   <div>\r\n  //     <h1>{count}</h1>\r\n  //     <button onClick={() => setCount(count + 1)}>Povećaj</button>\r\n  //     <button onClick={() => setCount(0)} >Resetiraj</button>\r\n  //   </div>\r\n  // );\r\n\r\n\r\n\r\n  // const [ime, setIme] = useState(\"Ime\");\r\n  // const [prezime, setPrezime] = useState(\"Prezime\");\r\n  \r\n    // const [darkMode, setDarkMode] =useState (false);\r\n    // const toggleTheme = () => { setDarkMode(!darkMode);\r\n\r\n    // };\r\n  \r\n    // <div className={darkMode? 'dark-theme' : 'light-theme'}>\r\n      \r\n      \r\n    //   <button onClick={toggleTheme}>{darkMode? 'Prebaci na svijetlu temu' : 'Prebaci na tamnu temu'}</button>\r\n      \r\n\r\n    // </div>\r\n\r\n\r\n// export default App;\r\n"],"mappings":";AACA,OAAOA,KAAK,MAAuC,OAAO;AAC1D,SAAQC,KAAK,QAAO,oBAAoB;AACxC,SAAQC,KAAK,QAAO,oBAAoB;AACxC,SAAQC,KAAK,QAAO,oBAAoB;AACxC,SAAQC,KAAK,QAAO,oBAAoB;AACxC,SAAQC,KAAK,QAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACzC,OAAO,MAAMC,GAAa,GAAGA,CAAA,KAAM;EACjC,oBACED,OAAA;IAAAE,QAAA,gBACEF,OAAA,CAACN,KAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACRN,OAAA,CAACL,KAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACRN,OAAA,CAACJ,KAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACRN,OAAA,CAACH,KAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACRN,OAAA,CAACF,KAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AACC;AACA;AACA;AACA;AACA;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;;AAGF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEE;AACJ;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEE;AACA;;AAEA;;AAEA;;AAGA;;AAGA;;AAGJ;AAAAC,EAAA,GA3FaN,GAAa;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}